#lang sicp

(define (filtered-accumulate filter combiner null-value term a next b)
  (define (iter a result)
    (cond ((> a b) result)
          ((filter a) (iter (next a) (combiner result (term a))))
          (else (iter (next a) result ))))
  (iter a null-value))

; a)
(define (prime? n)
  (define (square x) (* x x))
  (define (smallest-divisor n)
    (define (divides? a b)
      (= (remainder b a) 0))
    (define (find-divisor n test-divisor)
      (define (smallest-divisor n)
        (find-divisor n 2))
      (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))
    (find-divisor n 2))
  (cond ((<= n 1) #f)
         (else (= n (smallest-divisor n)))))

(define (sum-prime a b)
  (define (identity x) x)
  (define (next x)
    (cond ((< x 2) 2)
          ((= x 2) 3)
          ((= (remainder x 2) 0) (+ 1 x))
          (else (+ 2 x))))
  (filtered-accumulate prime? + 0 identity a next b))

(sum-prime 1 10)
(+ 2 3 5 7)
(sum-prime 1 20)
(+ 2 3 5 7 11 13 17 19)

; b)
(define (sum-gcd n)
  (define (gcd a b)
    (cond ((= 0 (remainder a b)) b)
          (else (gcd b (remainder a b)))))
  (define (gcd=1? x)
    (= 1 (gcd n x)))
  (define (identity x) x)
  (define (next x) (+ x 1))
  (filtered-accumulate gcd=1? * 1 identity 1 next (- n 1)))

(sum-gcd 10)
(* 1 3 7 9)
(sum-gcd 18)
(* 1 5 7 11 13 17)
