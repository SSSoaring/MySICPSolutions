#lang sicp

; a)
(define (div-by-gcd n d)
  (let ((gcd-poly (gcd-terms n d))
        (o1 (order (first-term n)))
        (o2 (order (first-term d))))
    (let ((c (coeff (first-term gcd-poly)))
          (o (order (first-term gcd-poly)))))
    (if (> o1 o2)
        (list (car (div-terms (mul-terms n (make-term 0 (exp c (+ 1 (- o1 o)))))
                              gcd-poly))
              (car (div-terms (mul-terms d (make-term 0 (exp c (+ 1 (- o1 o)))))
                              gcd-poly)))
        (list (car (div-terms (mul-terms n (make-term 0 (exp c (+ 1 (- o2 o)))))
                              gcd-poly))
              (car (div-terms (mul-terms d (make-term 0 (exp c (+ 1 (- o2 o)))))
                              gcd-poly))))))

(define (gcd-coeff term-list)
  (define (iter term-list result)
    (if (empty-termlist? term-list)
        result
        (let ((c (coeff (first-term term-list)))
              (rests (rest-terms term-list)))
          (iter rests (gcd result c)))))
  (iter (rest-terms term-list)
        (coeff (first-term term-list))))

(define (reduce-sum n d)
  (let ((mid-result (div-by-gcd n d)))
    (let ((gcd-n (gcd-coeff (car mid-result)))
          (gcd-d (gcd-coeff (car mid-result))))
      (let ((c (gcd gcd-n gcd-d)))
        (list (car (div-terms (car mid-result)
                              (make-term 0 c)))
              (car (div-terms (cadr mid-result)
                              (make-term 0 c))))))))

(define (reduce-poly p1 p2)
  (if (same-variable? (variable p1) (variable p2))
      (let ((result (reduce-terms (term-list p1)
                                  (term-list p2))))
        (list (make-poly (variable p1)
                         (car result))
              (make-poly (variable p1)
                         (cadr result)))

      (error "Polys not in same var -- REDUCE-POLY"
             (list p1 p2)))))


; b)
(define (reduce-integer n d)
  (let ((g (gcd n d)))
    (list (tag (/ n g)) (tag (/ d g)))))
(put 'reduce '(polynomial polynomial) reduce-poly)
(put 'reduce '(scheme-number scheme-number) reduce-integer)
(define (reduce n d)
  (apply-generic 'reduce n d))
